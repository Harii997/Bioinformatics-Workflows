# Transcriptomic Analysis Script

# Import required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind
import statsmodels.api as sm
from statsmodels.stats.multitest import multipletests

# Load expression data
def load_data(file_path):
    """
    Load expression data from a CSV file.
    Columns: genes, sample1_rep1, sample1_rep2, ..., sample2_rep1, sample2_rep2
    """
    return pd.read_csv(file_path, index_col=0)

# Perform differential expression analysis
def differential_expression(data, group1_samples, group2_samples):
    """
    Perform differential expression analysis between two groups.
    
    Parameters:
    data: pd.DataFrame - Expression data.
    group1_samples: list - Column names for group 1.
    group2_samples: list - Column names for group 2.
    
    Returns:
    pd.DataFrame with log2 fold change, p-values, and adjusted p-values.
    """
    results = []
    for gene in data.index:
        group1 = data.loc[gene, group1_samples]
        group2 = data.loc[gene, group2_samples]
        fold_change = group2.mean() / group1.mean()
        log2_fc = np.log2(fold_change + 1e-8)
        t_stat, p_value = ttest_ind(group1, group2, equal_var=False)
        results.append([gene, log2_fc, p_value])
    
    results_df = pd.DataFrame(results, columns=["Gene", "Log2FC", "PValue"])
    
    # Multiple testing correction
    results_df['AdjPValue'] = multipletests(results_df['PValue'], method='fdr_bh')[1]
    
    return results_df

# Volcano plot for DEGs
def plot_volcano(results_df, log2fc_thresh=1, pvalue_thresh=0.05, significant_color="red", nonsignificant_color="grey"):
    """Generate a volcano plot for DEGs with customizable color scheme."""
    plt.figure(figsize=(10, 8))
    results_df['-log10(PValue)'] = -np.log10(results_df['PValue'])
    
    # Determine significance
    significant = (results_df['AdjPValue'] < pvalue_thresh) & (abs(results_df['Log2FC']) > log2fc_thresh)
    
    # Plot
    sns.scatterplot(data=results_df, x='Log2FC', y='-log10(PValue)', hue=significant,
                    palette={True: significant_color, False: nonsignificant_color}, legend=False)
    
    plt.axvline(x=log2fc_thresh, color='red', linestyle='--')
    plt.axvline(x=-log2fc_thresh, color='red', linestyle='--')
    plt.axhline(y=-np.log10(pvalue_thresh), color='blue', linestyle='--')
    
    plt.xlabel('Log2 Fold Change')
    plt.ylabel('-Log10 P-Value')
    plt.title('Volcano Plot of DEGs')
    plt.show()

# Save results to a CSV file
def save_results(results_df, output_file):
    """Save the differential expression results to a CSV file."""
    results_df.to_csv(output_file, index=False)

# Main workflow
def main(input_file, group1_samples, group2_samples, output_file):
    data = load_data(input_file)
    results = differential_expression(data, group1_samples, group2_samples)
    save_results(results, output_file)
    plot_volcano(results, significant_color="green", nonsignificant_color="blue")

if __name__ == "__main__":
    # User-defined variables
    input_file = "expression_data.csv"  # Replace with your file path
    group1_samples = ["sample1_rep1", "sample1_rep2"]
    group2_samples = ["sample2_rep1", "sample2_rep2"]
    output_file = "DEG_results.csv"

    main(input_file, group1_samples, group2_samples, output_file)
